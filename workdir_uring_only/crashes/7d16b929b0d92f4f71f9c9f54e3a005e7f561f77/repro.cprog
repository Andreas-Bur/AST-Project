// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <setjmp.h>
#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#ifndef __NR_io_uring_enter
#define __NR_io_uring_enter 426
#endif
#ifndef __NR_io_uring_register
#define __NR_io_uring_register 427
#endif
#ifndef __NR_io_uring_setup
#define __NR_io_uring_setup 425
#endif

static __thread int clone_ongoing;
static __thread int skip_segv;
static __thread jmp_buf segv_env;

static void segv_handler(int sig, siginfo_t* info, void* ctx)
{
  if (__atomic_load_n(&clone_ongoing, __ATOMIC_RELAXED) != 0) {
    exit(sig);
  }
  uintptr_t addr = (uintptr_t)info->si_addr;
  const uintptr_t prog_start = 1 << 20;
  const uintptr_t prog_end = 100 << 20;
  int skip = __atomic_load_n(&skip_segv, __ATOMIC_RELAXED) != 0;
  int valid = addr < prog_start || addr > prog_end;
  if (skip && valid) {
    _longjmp(segv_env, 1);
  }
  exit(sig);
}

static void install_segv_handler(void)
{
  struct sigaction sa;
  memset(&sa, 0, sizeof(sa));
  sa.sa_handler = SIG_IGN;
  syscall(SYS_rt_sigaction, 0x20, &sa, NULL, 8);
  syscall(SYS_rt_sigaction, 0x21, &sa, NULL, 8);
  memset(&sa, 0, sizeof(sa));
  sa.sa_sigaction = segv_handler;
  sa.sa_flags = SA_NODEFER | SA_SIGINFO;
  sigaction(SIGSEGV, &sa, NULL);
  sigaction(SIGBUS, &sa, NULL);
}

#define NONFAILING(...)                                                        \
  ({                                                                           \
    int ok = 1;                                                                \
    __atomic_fetch_add(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    if (_setjmp(segv_env) == 0) {                                              \
      __VA_ARGS__;                                                             \
    } else                                                                     \
      ok = 0;                                                                  \
    __atomic_fetch_sub(&skip_segv, 1, __ATOMIC_SEQ_CST);                       \
    ok;                                                                        \
  })

#define SIZEOF_IO_URING_SQE 64
#define SIZEOF_IO_URING_CQE 16
#define SQ_HEAD_OFFSET 0
#define SQ_TAIL_OFFSET 64
#define SQ_RING_MASK_OFFSET 256
#define SQ_RING_ENTRIES_OFFSET 264
#define SQ_FLAGS_OFFSET 276
#define SQ_DROPPED_OFFSET 272
#define CQ_HEAD_OFFSET 128
#define CQ_TAIL_OFFSET 192
#define CQ_RING_MASK_OFFSET 260
#define CQ_RING_ENTRIES_OFFSET 268
#define CQ_RING_OVERFLOW_OFFSET 284
#define CQ_FLAGS_OFFSET 280
#define CQ_CQES_OFFSET 320

struct io_sqring_offsets {
  uint32_t head;
  uint32_t tail;
  uint32_t ring_mask;
  uint32_t ring_entries;
  uint32_t flags;
  uint32_t dropped;
  uint32_t array;
  uint32_t resv1;
  uint64_t resv2;
};

struct io_cqring_offsets {
  uint32_t head;
  uint32_t tail;
  uint32_t ring_mask;
  uint32_t ring_entries;
  uint32_t overflow;
  uint32_t cqes;
  uint64_t resv[2];
};

struct io_uring_params {
  uint32_t sq_entries;
  uint32_t cq_entries;
  uint32_t flags;
  uint32_t sq_thread_cpu;
  uint32_t sq_thread_idle;
  uint32_t features;
  uint32_t resv[4];
  struct io_sqring_offsets sq_off;
  struct io_cqring_offsets cq_off;
};

#define IORING_OFF_SQ_RING 0
#define IORING_OFF_SQES 0x10000000ULL
#define IORING_SETUP_SQE128 (1U << 10)
#define IORING_SETUP_CQE32 (1U << 11)

static long syz_io_uring_setup(volatile long a0, volatile long a1,
                               volatile long a2, volatile long a3)
{
  uint32_t entries = (uint32_t)a0;
  struct io_uring_params* setup_params = (struct io_uring_params*)a1;
  void** ring_ptr_out = (void**)a2;
  void** sqes_ptr_out = (void**)a3;
  uint32_t fd_io_uring = syscall(__NR_io_uring_setup, entries, setup_params);
  uint32_t sq_ring_sz =
      setup_params->sq_off.array + setup_params->sq_entries * sizeof(uint32_t);
  uint32_t cq_ring_sz = setup_params->cq_off.cqes +
                        setup_params->cq_entries * SIZEOF_IO_URING_CQE;
  uint32_t ring_sz = sq_ring_sz > cq_ring_sz ? sq_ring_sz : cq_ring_sz;
  *ring_ptr_out =
      mmap(0, ring_sz, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_POPULATE,
           fd_io_uring, IORING_OFF_SQ_RING);
  uint32_t sqes_sz = setup_params->sq_entries * SIZEOF_IO_URING_SQE;
  *sqes_ptr_out = mmap(0, sqes_sz, PROT_READ | PROT_WRITE,
                       MAP_SHARED | MAP_POPULATE, fd_io_uring, IORING_OFF_SQES);
  uint32_t* array =
      (uint32_t*)((uintptr_t)*ring_ptr_out + setup_params->sq_off.array);
  for (uint32_t index = 0; index < entries; index++)
    array[index] = index;
  return fd_io_uring;
}

static long syz_io_uring_submit(volatile long a0, volatile long a1,
                                volatile long a2)
{
  char* ring_ptr = (char*)a0;
  char* sqes_ptr = (char*)a1;
  char* sqe = (char*)a2;
  uint32_t sq_ring_mask = *(uint32_t*)(ring_ptr + SQ_RING_MASK_OFFSET);
  uint32_t* sq_tail_ptr = (uint32_t*)(ring_ptr + SQ_TAIL_OFFSET);
  uint32_t sq_tail = *sq_tail_ptr & sq_ring_mask;
  char* sqe_dest = sqes_ptr + sq_tail * SIZEOF_IO_URING_SQE;
  memcpy(sqe_dest, sqe, SIZEOF_IO_URING_SQE);
  uint32_t sq_tail_next = *sq_tail_ptr + 1;
  __atomic_store_n(sq_tail_ptr, sq_tail_next, __ATOMIC_RELEASE);
  return 0;
}

static long syz_memcpy_off(volatile long a0, volatile long a1, volatile long a2,
                           volatile long a3, volatile long a4)
{
  char* dest = (char*)a0;
  uint32_t dest_off = (uint32_t)a1;
  char* src = (char*)a2;
  uint32_t src_off = (uint32_t)a3;
  size_t n = (size_t)a4;
  return (long)memcpy(dest + dest_off, src + src_off, n);
}

uint64_t r[3] = {0xffffffffffffffff, 0x0, 0x0};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  install_segv_handler();
  intptr_t res = 0;
  NONFAILING(*(uint64_t*)0x20000140 = 0x20001000);
  NONFAILING(*(uint32_t*)0x20000148 = 0);
  NONFAILING(*(uint16_t*)0x2000014c = 0);
  NONFAILING(*(uint16_t*)0x2000014e = 0);
  NONFAILING(memset((void*)0x20000150, 0, 24));
  syscall(__NR_io_uring_register, /*fd=*/-1,
          /*opcode=IORING_REGISTER_PBUF_RING*/ 0x16ul, /*arg=*/0x20000140ul,
          /*nr_args=*/1ul);
  NONFAILING(*(uint32_t*)0x20000284 = 0);
  NONFAILING(*(uint32_t*)0x20000288 = 0);
  NONFAILING(*(uint32_t*)0x2000028c = 0);
  NONFAILING(*(uint32_t*)0x20000290 = 4);
  NONFAILING(*(uint32_t*)0x20000298 = -1);
  NONFAILING(memset((void*)0x2000029c, 0, 12));
  res = -1;
  NONFAILING(res = syz_io_uring_setup(/*entries=*/0x1048, /*params=*/0x20000280,
                                      /*ring_ptr=*/0x20000080,
                                      /*sqes_ptr=*/0x20000100));
  if (res != -1) {
    r[0] = res;
    NONFAILING(r[1] = *(uint64_t*)0x20000080);
    NONFAILING(r[2] = *(uint64_t*)0x20000100);
  }
  NONFAILING(*(uint64_t*)0x200016c0 = 0x20002000);
  NONFAILING(*(uint64_t*)0x20002000 = 0);
  NONFAILING(*(uint32_t*)0x20002008 = 0);
  NONFAILING(*(uint16_t*)0x2000200c = 0);
  NONFAILING(*(uint16_t*)0x2000200e = 0);
  NONFAILING(*(uint32_t*)0x200016c8 = 1);
  NONFAILING(*(uint16_t*)0x200016cc = 0);
  NONFAILING(*(uint16_t*)0x200016ce = 0);
  NONFAILING(memset((void*)0x200016d0, 0, 24));
  syscall(__NR_io_uring_register, /*fd=*/r[0],
          /*opcode=IORING_REGISTER_PBUF_RING*/ 0x16ul, /*arg=*/0x200016c0ul,
          /*nr_args=*/1ul);
  NONFAILING(*(uint32_t*)0x20003200 = 0x80000000);
  NONFAILING(syz_memcpy_off(/*ring_ptr=*/r[1], /*off=*/4, /*src=*/0x20003200,
                            /*src_off=*/0, /*nbytes=*/4));
  NONFAILING(*(uint8_t*)0x20000040 = 1);
  NONFAILING(*(uint8_t*)0x20000041 = 0x65);
  NONFAILING(*(uint16_t*)0x20000042 = 0x4004);
  NONFAILING(*(uint32_t*)0x20000044 = r[0]);
  NONFAILING(*(uint64_t*)0x20000048 = 6);
  NONFAILING(*(uint64_t*)0x20000050 = 0x20000000);
  NONFAILING(*(uint64_t*)0x20000000 = 0);
  NONFAILING(*(uint64_t*)0x20000008 = 0);
  NONFAILING(*(uint32_t*)0x20000058 = 1);
  NONFAILING(*(uint32_t*)0x2000005c = 0xc);
  NONFAILING(*(uint64_t*)0x20000060 = 1);
  NONFAILING(*(uint16_t*)0x20000068 = 0);
  NONFAILING(*(uint16_t*)0x2000006a = 0);
  NONFAILING(memset((void*)0x2000006c, 0, 20));
  NONFAILING(syz_io_uring_submit(/*ring_ptr=*/r[1], /*sqes_ptr=*/r[2],
                                 /*sqe=*/0x20000040));
  NONFAILING(*(uint32_t*)0x20000104 = 0);
  NONFAILING(*(uint32_t*)0x20000108 = 0);
  NONFAILING(*(uint32_t*)0x2000010c = 0);
  NONFAILING(*(uint32_t*)0x20000110 = 0);
  NONFAILING(*(uint32_t*)0x20000118 = -1);
  NONFAILING(memset((void*)0x2000011c, 0, 12));
  NONFAILING(syz_io_uring_setup(/*entries=*/0x2004ddf, /*params=*/0x20000100,
                                /*ring_ptr=*/0x20000240,
                                /*sqes_ptr=*/0x200001c0));
  syscall(__NR_io_uring_enter, /*fd=*/r[0], /*to_submit=*/0x4f2b,
          /*min_complete=*/0, /*flags=*/0ul, /*sigmask=*/0ul, /*size=*/0ul);
  return 0;
}
