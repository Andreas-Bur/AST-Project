// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);

  memcpy((void*)0x20000600, "hfsplus\000", 8);
  memcpy((void*)0x20000640, "./file0\000", 8);
  memcpy(
      (void*)0x20000680,
      "\x78\x9c\xec\xdd\x4f\x6f\x1c\x67\x1d\x07\xf0\xef\x6e\x1c\xc7\x36\x6a\xba"
      "\x49\x93\x36\xd0\x4a\x58\x45\x02\x84\x45\x62\xef\xa2\x92\xa0\xaa\x40\x29"
      "\xc8\x42\x15\x6a\xc5\x2b\xb0\x88\xd3\x58\xd9\xb8\x95\xbd\x45\x6e\x0e\xc8"
      "\x20\xce\x7d\x0d\xe5\x60\xa9\x67\xc4\x15\xa9\x52\x39\xc3\x2b\x40\x46\x3d"
      "\x22\x71\x37\x27\x57\x33\x3b\xeb\x5d\xdb\x5b\xc7\x6e\x5c\xef\xba\xf9\x7c"
      "\xa4\xd9\xe7\x79\xe6\x99\x79\xe6\x37\xbf\xf9\x93\x99\xb5\xa2\x0d\xf0\xd4"
      "\x5a\x9c\xcb\xc4\x66\x6a\x59\x9c\x7b\x73\xa3\x68\x6f\x6f\xb5\xda\xdb\x5b"
      "\xad\x87\xbd\x7a\x92\x4b\x49\xea\xc9\x54\x92\x5a\x31\xfb\x6f\x49\x3e\x4b"
      "\x36\xd3\x9d\xf2\xcd\x5e\xc7\x40\x79\xc8\xdb\xaf\x3e\xf3\xf1\x87\x2f\x7e"
      "\xfa\x5a\xb7\x35\x55\x4d\xe5\xf2\xb5\xa3\xd6\x3b\x9e\xbd\x58\x1a\xdd\x58"
      "\xcb\xf2\xb4\xc6\x6b\x3e\xf1\x78\x03\x7b\x58\x15\xb3\x4f\x16\x1f\x9c\x8e"
      "\xdd\x9e\xff\x0c\xed\x7e\xc2\xeb\x12\x00\x18\x67\xb5\xe4\xc2\xb0\xf9\x8d"
      "\x64\xa6\x7a\x58\x2f\xde\x03\xba\x4f\xc5\xdd\x67\xec\x73\x6d\x73\xd4\x01"
      "\x00\x00\x00\xc0\x19\x78\x76\x27\x3b\xd9\xc8\xe5\x51\xc7\x01\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\xe7\x49\xf5\xfb\xff\xb5\x6a\xaa\xf7\xea\xb3\xa9"
      "\xf5\x7e\xff\x7f\xb2\x9a\x97\xaa\x7e\xae\x7d\x32\xea\x00\x00\x00\x00\x00"
      "\x00\x00\x00\xe0\x14\x7c\x7b\x27\x3b\xd9\xc8\xe5\x5e\x7b\xb7\x56\xfe\xcd"
      "\xff\xe5\xb2\x71\xad\xfc\xfc\x46\xde\xcf\x7a\x96\xb3\x96\x9b\xd9\xc8\x52"
      "\x3a\xe9\x64\x2d\x0b\x49\x1a\x03\x03\x4d\x6e\x2c\x75\x3a\x6b\x0b\xc7\x58"
      "\xb3\x59\xac\x59\x3f\xb8\x66\xf3\x8c\x76\x18\x00\x00\x00\x00\x00\x00\x00"
      "\xbe\x9e\xfe\x94\xc5\xfe\xdf\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x60\x1c\xd4\x92\x0b\xdd\xa2\x9c\xae\xf5\xea\x8d\xd4\x27\x92\x4c\x25"
      "\x99\x2c\x96\xdb\x4c\xfe\xd5\xab\x9f\x67\x9f\x8c\x3a\x00\x00\x00\x00\x38"
      "\x03\xcf\xee\x64\x27\x1b\xb9\xdc\x6b\xef\xd6\xca\x77\xfe\xe7\xcb\xf7\xfe"
      "\xa9\xbc\x9f\xd5\x74\xb2\x92\x4e\xda\x59\xce\xdd\xf2\xbb\x80\xee\x5b\x7f"
      "\x7d\x7b\xab\xd5\xde\xde\x6a\x3d\x2c\xa6\xc3\xe3\xfe\xfc\x7f\x27\x0a\xa3"
      "\x1c\x31\xdd\xef\x1e\x86\x6f\xf9\x46\xb9\xc4\x74\xee\x65\xa5\x9c\x73\x33"
      "\xbf\xcb\xbb\x69\xe7\x6e\xea\xe5\x9a\x85\x1b\xbd\x78\x86\xc7\xf5\xc7\x22"
      "\xa6\xda\x4f\x2b\xc7\x8c\xec\x6e\x55\x16\x7b\xfe\xeb\xaa\x1c\x0f\x8d\xe4"
      "\x51\x3d\x17\xf7\x32\x32\x5f\xc5\x56\x64\xe3\xca\xd1\x99\x38\xe1\xd1\x69"
      "\x94\xa3\xf6\xb7\xb4\x90\xfa\xde\x37\x3f\xd7\xbe\x82\x9c\xcf\x54\x65\xb1"
      "\x3f\x6f\x8c\x5b\xce\xf7\x65\xa2\x39\x70\xf6\x3d\x7f\x74\x26\x92\x99\x7f"
      "\xb7\xfe\x7f\xbf\xbd\xfa\xe0\xfe\xbd\xf5\xb9\xf1\xd9\xa5\x2f\xe9\x60\x26"
      "\x5a\x03\x99\x78\xe1\xa9\xca\xc4\x7c\x99\x89\xeb\x7b\xed\xc5\xfc\x2a\xbf"
      "\xcd\x5c\x66\xf3\x56\xd6\xb2\x92\xdf\x67\x29\x9d\x2c\x67\x36\x6f\x94\xb5"
      "\xa5\xea\x7c\x2e\x3e\x1b\x47\x67\xea\x67\xfb\x5a\x6f\x3d\x2e\x92\xc9\xea"
      "\xb8\x74\xef\xa2\x27\x8b\xe9\xe5\x72\xdd\xcb\x59\xc9\x6f\xf2\x6e\xee\x96"
      "\x57\xf9\xed\x34\xd3\xcc\x2b\xb9\x9d\x3b\x69\x96\x57\x7d\xef\x08\x5f\x3f"
      "\xc6\x55\x5f\x3f\xd9\x55\xff\x9d\xef\x57\x95\x8b\x49\x7e\x59\x95\xe3\xa1"
      "\xc8\xeb\x95\x81\xbc\x0e\xde\x73\x1b\x65\xdf\xe0\x9c\x7e\x96\xae\x9e\xfe"
      "\xbd\x71\xe2\x5b\x55\xa5\x38\x7b\x5e\x1f\xbb\x7b\xe3\x95\x03\xff\x4a\xf4"
      "\x32\xf1\xdc\xd1\x99\xf8\xcb\x6e\xf1\xb9\xde\x5e\x7d\xb0\x76\x7f\xe9\xbd"
      "\x63\x6e\xef\x7b\x55\x59\x64\xe0\x17\x63\x95\x89\xe2\x7c\xb9\x5a\x1c\xac"
      "\xb2\xb5\xff\xec\x28\xfa\x9e\x1b\xda\xb7\x50\xf6\x5d\xdb\xeb\xab\x1f\xea"
      "\xbb\xbe\xd7\xf7\xb8\x2b\x75\xb2\x7a\x86\x3b\x3c\x52\xb3\xec\x7b\x61\x68"
      "\x5f\xab\xec\xbb\x31\xd0\x37\xec\x79\x0b\x80\xb1\x37\xf3\x83\x99\xc9\xe9"
      "\xff\x4e\xff\x73\xfa\xa3\xe9\x3f\x4f\xdf\x9f\x7e\x73\xea\xf5\x4b\xb7\x2f"
      "\xbd\x34\x99\x8b\xff\xb8\xf8\x93\x89\xf9\x0b\xdf\xad\xbf\x54\xfb\x6b\x3e"
      "\xca\x1f\xfa\xef\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x97\xb7\xfe\xc1\xa3\x07\x4b"
      "\xed\xf6\xf2\x9a\x8a\x8a\x8a\xca\x5e\x65\xd4\x77\x26\xe0\xab\x76\xab\xf3"
      "\xf0\xbd\x5b\xeb\x1f\x3c\xfa\xe1\xca\xc3\xa5\x77\x96\xdf\x59\x5e\xfd\x51"
      "\xb3\xf5\xca\x9d\x1f\xb7\x16\xee\x2c\xdc\xba\xb7\xd2\x5e\x9e\xef\x7e\x8e"
      "\x3a\x4c\x00\xe0\x14\xf5\x1f\xfa\x47\x1d\x09\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\xf0\x45\xce\xe2\xbf\x13\x8f\x7a\x1f\x01\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xaf\xb7\xc5\xb9\x4c"
      "\x6c\xa6\x96\x85\xf9\x9b\xf3\x45\x7b\x7b\xab\xd5\x2e\xa6\x5e\xbd\xbf\xe4"
      "\x54\x92\x5a\x51\xf9\x7b\x92\xcf\x92\xcd\x74\xa7\x34\x06\x86\xab\x7d\xd1"
      "\x76\xde\x7e\xf5\x99\x8f\x3f\x7c\xf1\xd3\xd7\xfa\x63\x4d\xf5\x96\xaf\x1d"
      "\xb5\xde\xf1\xec\x8b\xa5\x7e\x20\xa6\x23\xd5\x1f\x3f\x5e\xf3\x24\xe3\x0d"
      "\xd5\xdf\xc3\xd9\x24\x57\xab\x12\x46\xee\xf3\x00\x00\x00\xff\xff\xf3\x80"
      "\x02\x09",
      1496);
  syz_mount_image(/*fs=*/0x20000600, /*dir=*/0x20000640, /*flags=*/0,
                  /*opts=*/0x20000000, /*chdir=*/1, /*size=*/0x5d8,
                  /*img=*/0x20000680);
  memcpy((void*)0x20000080, "./file1\000", 8);
  memcpy((void*)0x20000200, "user.incfs.id\000", 14);
  syscall(__NR_setxattr, /*path=*/0x20000080ul, /*name=*/0x20000200ul,
          /*val=*/0ul, /*size=*/0ul, /*flags=XATTR_REPLACE*/ 2ul);
  return 0;
}
