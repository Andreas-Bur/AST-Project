// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif
#ifndef __NR_pwritev2
#define __NR_pwritev2 328
#endif

static unsigned long long procid;

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

uint64_t r[1] = {0xffffffffffffffff};

int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x20000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x21000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul, /*fd=*/-1,
          /*offset=*/0ul);
  intptr_t res = 0;
  memcpy((void*)0x200004c0, "udf\000", 4);
  memcpy((void*)0x20000500, "./file0\000", 8);
  memcpy((void*)0x20000080, "noadinicb", 9);
  *(uint8_t*)0x20000089 = 0x2c;
  memcpy((void*)0x2000008a, "unhide", 6);
  *(uint8_t*)0x20000090 = 0x2c;
  memcpy((void*)0x20000091, "dmode", 5);
  *(uint8_t*)0x20000096 = 0x3d;
  sprintf((char*)0x20000097, "%023llo", (long long)9);
  *(uint8_t*)0x200000ae = 0x2c;
  *(uint8_t*)0x200000af = 0;
  memcpy(
      (void*)0x20000a40,
      "\x78\x9c\xec\xdb\x4d\x6c\x54\xd5\x1b\xc7\xf1\xdf\x33\x77\x66\x98\x0e\xfc"
      "\xff\x0c\x6f\x15\x14\x4d\x13\x4c\xac\xa8\xd0\x17\x2a\x08\xb2\xe0\xc5\x46"
      "\x13\x5e\x14\xa8\x46\x63\x20\x85\x99\x62\xa1\xed\x60\xa7\x18\x4a\x88\xb2"
      "\x31\x51\xc3\x96\xc4\x8d\x4b\x57\x1a\x12\x5d\x19\xf7\x24\x2c\xc5\x05\xc1"
      "\x18\x76\xea\xc6\xcd\xac\x64\x89\x39\x77\xee\xdb\x0c\x85\x4e\xa5\x9d\xa1"
      "\xf4\xfb\x21\x70\xee\x3d\xf3\xcc\x70\xce\x79\xee\xbd\xe7\x9c\x49\x2b\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xed\x7d\x63\x4f\x4f\xaf\xb5"
      "\xbb\x15\x00\x00\xa0\x95\x0e\x1d\x3d\xd2\xd3\xcf\xfc\x0f\x00\xc0\x92\x72"
      "\x8c\xfd\x3f\x00\x00\xc0\x52\x62\xf2\x74\x45\xa6\x1f\xbe\xae\xda\x41\xff"
      "\xbc\x26\x77\x60\x74\xe2\xfc\x85\xa1\xfd\x83\x33\xbf\xad\xc3\x64\x4a\xc9"
      "\xf3\xe3\xdd\xdf\x5c\x6f\x5f\xff\xb6\x81\x57\xb7\xef\x08\xcb\x87\xbf\x7f"
      "\xbe\x6d\xd0\xe1\xa3\xc7\xf6\x74\xed\x2b\x8f\x9f\x9b\x2c\x55\x2a\xa5\x62"
      "\xd7\xd0\xc4\xe8\xa9\x72\xb1\xd4\xf4\x27\x3c\xea\xfb\x1b\x6d\xf6\x07\xa0"
      "\x6b\xfc\xec\xf9\xe2\xc8\x48\xa5\xab\x6f\x4b\x7f\xdd\xcb\x17\x0a\x7f\x2d"
      "\x5b\xde\x59\xd8\xb5\x3d\xd3\x39\x10\xc6\x0e\xed\x1f\x1c\x3c\x9a\x88\x49"
      "\x67\xfe\xf3\xff\x7e\x9f\x07\xad\xf0\xb3\xf2\xf4\xa2\x4c\x67\x7e\xba\x66"
      "\x87\x24\xa5\xf4\xe8\x63\x31\xcb\xb5\xb3\xd0\x3a\xfc\x4e\x6c\xf6\x3b\x31"
      "\xb4\x7f\xd0\xef\xc8\xd8\xe8\xf0\xc4\x94\x7b\xd1\x52\x41\x54\xaa\x7e\x4c"
      "\xb2\xe1\x18\xb5\x20\x17\x8f\x24\x25\xb9\x76\x59\x76\x7e\xf6\x6c\x19\x79"
      "\xfa\x59\xa6\xbd\x5b\xab\x76\x58\x92\x17\x8e\xc3\x4b\xfe\x17\xc3\x4d\xb5"
      "\xa7\x1d\xd2\x6e\xeb\x2a\xa9\x5b\x8b\x20\x67\x8f\xb1\x65\xf2\x74\x42\xa6"
      "\xeb\x5b\x0b\x7a\x3b\x18\x57\x3f\xff\x59\xe9\x52\xbb\x1b\x87\x05\x97\x0e"
      "\xee\xff\xb2\x55\xed\x1d\xff\x79\xe0\xee\x27\xf7\xd8\x3c\xf0\x6e\xd7\x5b"
      "\x13\x23\xe5\x44\xac\xa5\x82\x3b\x6a\xb1\xcf\x0f\xad\xf4\x98\x3f\x9b\x72"
      "\xf2\x74\xd8\xbf\xe3\xab\x76\xa4\xdd\x8d\x41\xcb\x75\xc8\xd3\x6e\x99\x0a"
      "\xef\x7d\xe2\xaf\x2b\xe4\xaf\x4b\x57\xee\xda\xfe\xfc\xee\x93\xc9\x15\xc6"
      "\x53\xb3\x7c\x8e\x8b\xdd\x12\xdc\x5c\xcd\xcc\xc9\x99\x60\xe9\x60\x29\xf7"
      "\x67\xfe\xfb\x85\xe6\xe4\xcc\xd3\x9f\x32\xdd\xfd\x2d\xe7\x9f\x77\x87\x73"
      "\x80\x74\xf9\x5e\x7b\x9b\x86\x56\x30\x4f\xbf\xcb\x54\xf9\xb8\x6a\xd6\xb0"
      "\x2f\xf5\x12\xfb\xfb\xc8\x62\x9f\xfb\x17\xb6\xfd\x1d\xb9\x7d\xe5\x73\xd3"
      "\x93\xa3\xa7\x3f\x9a\x9a\xf1\xf5\x7c\x6e\xcf\xc9\xca\xd4\xe4\xf0\xa9\x99"
      "\x5f\xae\xed\x5d\xbd\x64\xcd\x6c\xfb\xd8\x46\xa9\xb9\x6d\xc9\xf2\xe6\xe9"
      "\x86\x4c\x1b\xae\x55\xa3\xf7\x05\x7b\x80\xff\xd5\xce\xe2\xd6\x7c\x7b\x29"
      "\xbe\x16\xba\x1b\xca\x50\xf2\xfa\x69\xe6\xb8\xe9\x5d\xec\x1c\xd6\x51\xae"
      "\x4d\x66\x9e\xfe\x90\x69\xe4\xf8\xfa\xda\x3c\xa3\xfc\x9c\xc7\x66\x29\x70"
      "\xf9\xef\x94\xe9\x8b\xef\x7e\xb1\x30\xd3\x41\xfe\xd3\xb5\xb3\x44\xfe\x5f"
      "\x8f\xc7\x2f\x67\xf5\x65\xc4\xcf\xed\xff\x6b\xdf\x6b\x85\x6b\x89\x4d\x7d"
      "\xeb\x1e\x54\xbf\x10\xf9\x77\x6d\x72\xf9\x7f\x5f\xa6\xbd\xff\xac\x0f\xbe"
      "\xd3\xa8\xe5\xdf\x6b\x88\xb5\xa0\xff\x1f\x5e\xdd\x18\xc4\xa5\xb2\x2e\x2e"
      "\x1d\x76\xa7\xf6\x89\x23\xa3\x63\xa5\x1e\x17\x7b\x4f\xa6\xd5\x37\xc2\x58"
      "\xf9\xb1\xf9\x20\x76\x4d\x1c\xdb\xeb\x62\x2b\x32\x7d\x79\xbd\x3e\x76\x79"
      "\x10\xbb\x36\x8e\xed\x73\xb1\xb7\x65\xba\x73\x6b\xe6\xd8\x75\x71\x6c\xbf"
      "\x8b\x9d\x76\xcf\xeb\x3b\x5d\x61\x6c\xde\xc5\x3e\x17\xc4\x76\xc6\xb1\x5b"
      "\x4e\x95\xc7\x8a\xb3\x0d\xab\xcb\xff\x2d\x99\x9e\x39\xf1\xa6\x85\x7d\x7e"
      "\x60\xfe\x13\xf7\xff\xe5\x86\x32\x72\x5f\xce\x1f\x7e\x3c\x5f\xf9\x2f\x24"
      "\xea\x2e\x07\x79\xfd\x20\xc8\x7f\x7a\x96\xfc\x7f\x25\xd3\xf4\xdf\x1b\xc3"
      "\x7e\xfb\x63\x1f\x5e\x56\xab\xfc\x7f\xe3\xfc\x8f\xcb\xf4\xe3\xd5\xfa\xd8"
      "\x70\x43\xb9\x3a\x8e\xed\x6d\xb6\x5b\xed\xe6\xf2\xbf\x52\xa6\xeb\xc7\x6f"
      "\x47\x7d\x0e\xfa\x16\x9c\xc6\x19\x4a\xe6\xff\xe9\x74\x7d\x19\x8d\x6b\x9b"
      "\xf2\xbf\x2a\x51\x57\x08\xda\x95\x9d\xe3\x58\x2c\x45\x95\xe9\x8b\x67\x87"
      "\xc7\xc6\x4a\x93\x1c\x70\xc0\x01\x07\xd1\x41\xbb\x9f\x4c\x68\x05\x37\xff"
      "\x77\xc8\x74\xf3\xd9\x94\x85\xeb\x98\x60\xfe\x5f\x51\x3b\x8b\x57\x4c\x77"
      "\x3f\x8d\xe7\xff\x9d\x0d\x65\xa4\x4d\xf3\xff\xea\x44\xdd\xce\x60\xd5\x92"
      "\x49\x4b\xb9\xa9\xf1\x73\x99\x4e\x29\x57\x99\xbe\xf8\xca\xe8\xf8\xf0\xe9"
      "\xd2\xe9\xd2\xc4\x6b\xdb\x06\x76\x0c\xf4\xf4\x0e\xf4\x65\xb2\xe1\xda\x2e"
      "\x3e\x6a\x7a\xe8\x9e\x08\x2e\xff\x37\x65\x2a\xdc\xfa\x35\xda\xc7\xd4\xaf"
      "\xff\x66\x5e\xff\xe7\x1b\xca\x48\x9b\xf2\xbf\x26\xd9\xa7\xba\x75\x4d\xd3"
      "\x43\xb1\x24\xb9\xfc\x5f\x91\x69\xdd\xe7\xb7\xa3\xfd\xe6\xc3\xd6\xff\xe1"
      "\xfe\xbf\x7b\x53\x7d\x19\xdd\x7f\x6d\xca\xff\xda\x44\x5d\x21\x68\xd7\x8a"
      "\x39\x8e\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x26"
      "\x79\xf3\x74\x46\xa6\xe2\xf7\x2f\x5b\xf8\x3b\x44\xcd\xfc\xfc\x5f\xb1\xa1"
      "\x8c\xb4\xe9\xe7\xbf\x3a\x13\x75\xc5\x16\xfd\x5e\x43\xd3\x83\x0c\x00\x00"
      "\x00\x00\x00\x00\x00\x00\xd0\x42\x29\x79\xfa\x46\xa6\x17\x54\xb5\xcf\x5c"
      "\xc5\x0a\xe9\x60\xb2\xc4\x13\xed\xdf\x00\x00\x00\xff\xff\xfd\xc3\x43"
      "\x11",
      1188);
  syz_mount_image(/*fs=*/0x200004c0, /*dir=*/0x20000500, /*flags=*/0,
                  /*opts=*/0x20000080, /*chdir=*/3, /*size=*/0x4a4,
                  /*img=*/0x20000a40);
  memcpy((void*)0x20000000, "./file1\000", 8);
  res = syscall(
      __NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0x20000000ul,
      /*flags=O_NONBLOCK|O_NOFOLLOW|O_DIRECT|O_CREAT|O_WRONLY*/ 0x24841ul,
      /*mode=*/0ul);
  if (res != -1)
    r[0] = res;
  *(uint64_t*)0x20001240 = 0x20000000;
  memset((void*)0x20000000, 24, 1);
  *(uint64_t*)0x20001248 = 1;
  syscall(__NR_pwritev2, /*fd=*/r[0], /*vec=*/0x20001240ul, /*vlen=*/1ul,
          /*off_low=*/0x8001, /*off_high=*/0, /*flags=RWF_DSYNC*/ 2ul);
  return 0;
}
