loop5: detected capacity change from 0 to 1024
======================================================
WARNING: possible circular locking dependency detected
6.9.0-rc4 #2 Not tainted
------------------------------------------------------
syz-executor.5/20299 is trying to acquire lock:
ffff88802a486288 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_get_block+0x137/0x390 fs/hfsplus/extents.c:260

but task is already holding lock:
ffff88802ac080b0 (&tree->tree_lock){+.+.}-{3:3}, at: hfsplus_find_init+0x98/0x110 fs/hfsplus/bfind.c:30

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (&tree->tree_lock){+.+.}-{3:3}:
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595
       hfsplus_write_failed fs/hfsplus/inode.c:37 [inline]
       hfsplus_write_begin+0xbf/0xd0 fs/hfsplus/inode.c:51
       generic_perform_write+0x100/0x2b0 mm/filemap.c:3974
       __generic_file_write_iter+0x133/0x140 mm/filemap.c:4069
       generic_file_write_iter+0x91/0x170 mm/filemap.c:4095
       call_write_iter include/linux/fs.h:2110 [inline]
       do_iter_readv_writev+0x2bb/0x3b0 fs/read_write.c:741
       vfs_writev+0x1a8/0x750 fs/read_write.c:971
       do_pwritev fs/read_write.c:1072 [inline]
       __do_sys_pwritev fs/read_write.c:1119 [inline]
       __se_sys_pwritev fs/read_write.c:1114 [inline]
       __x64_sys_pwritev+0xf7/0x170 fs/read_write.c:1114
       x64_sys_call+0x188a/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:297
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

-> #0 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}:
       check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
       check_prevs_add kernel/locking/lockdep.c:3253 [inline]
       validate_chain kernel/locking/lockdep.c:3869 [inline]
       __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_get_block+0x137/0x390 fs/hfsplus/extents.c:260
       block_read_full_folio+0x1ca/0x550 fs/buffer.c:2384
       hfsplus_read_folio+0x21/0x30 fs/hfsplus/inode.c:28
       filemap_read_folio+0x51/0x140 mm/filemap.c:2331
       do_read_cache_folio+0x18c/0x2f0 mm/filemap.c:3747
       do_read_cache_page mm/filemap.c:3813 [inline]
       read_cache_page+0x3b/0xb0 mm/filemap.c:3822
       read_mapping_page include/linux/pagemap.h:888 [inline]
       __hfs_bnode_create+0x269/0x330 fs/hfsplus/bnode.c:440
       hfsplus_bnode_find+0x1ec/0x540 fs/hfsplus/bnode.c:486
       hfsplus_brec_find+0x10d/0x220 fs/hfsplus/bfind.c:183
       hfsplus_brec_read+0x2e/0x90 fs/hfsplus/bfind.c:222
       hfsplus_find_cat+0x4c/0x160 fs/hfsplus/catalog.c:202
       hfsplus_iget+0x1f1/0x310 fs/hfsplus/super.c:82
       hfsplus_fill_super+0x4fb/0xa20 fs/hfsplus/super.c:509
       mount_bdev+0x130/0x1a0 fs/super.c:1658
       hfsplus_mount+0x39/0x50 fs/hfsplus/super.c:647
       legacy_get_tree+0x3f/0xb0 fs/fs_context.c:662
       vfs_get_tree+0x3a/0x160 fs/super.c:1779
       do_new_mount fs/namespace.c:3352 [inline]
       path_mount+0xcb0/0x11d0 fs/namespace.c:3679
       do_mount fs/namespace.c:3692 [inline]
       __do_sys_mount fs/namespace.c:3898 [inline]
       __se_sys_mount fs/namespace.c:3875 [inline]
       __x64_sys_mount+0x17b/0x1c0 fs/namespace.c:3875
       x64_sys_call+0x2072/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:166
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&tree->tree_lock);
                               lock(&HFSPLUS_I(inode)->extents_lock);
                               lock(&tree->tree_lock);
  lock(&HFSPLUS_I(inode)->extents_lock);

 *** DEADLOCK ***

2 locks held by syz-executor.5/20299:
 #0: ffff88801afe30e0 (&type->s_umount_key#65/1){+.+.}-{3:3}, at: alloc_super+0x135/0x4d0 fs/super.c:343
 #1: ffff88802ac080b0 (&tree->tree_lock){+.+.}-{3:3}, at: hfsplus_find_init+0x98/0x110 fs/hfsplus/bfind.c:30

stack backtrace:
CPU: 0 PID: 20299 Comm: syz-executor.5 Not tainted 6.9.0-rc4 #2
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0xda/0x140 lib/dump_stack.c:114
 dump_stack+0x19/0x20 lib/dump_stack.c:123
 print_circular_bug+0x2d5/0x430 kernel/locking/lockdep.c:2060
 check_noncircular+0x10e/0x120 kernel/locking/lockdep.c:2187
 check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
 check_prevs_add kernel/locking/lockdep.c:3253 [inline]
 validate_chain kernel/locking/lockdep.c:3869 [inline]
 __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
 lock_acquire kernel/locking/lockdep.c:5754 [inline]
 lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
 __mutex_lock_common kernel/locking/mutex.c:608 [inline]
 __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
 mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
 hfsplus_get_block+0x137/0x390 fs/hfsplus/extents.c:260
 block_read_full_folio+0x1ca/0x550 fs/buffer.c:2384
 hfsplus_read_folio+0x21/0x30 fs/hfsplus/inode.c:28
 filemap_read_folio+0x51/0x140 mm/filemap.c:2331
 do_read_cache_folio+0x18c/0x2f0 mm/filemap.c:3747
 do_read_cache_page mm/filemap.c:3813 [inline]
 read_cache_page+0x3b/0xb0 mm/filemap.c:3822
 read_mapping_page include/linux/pagemap.h:888 [inline]
 __hfs_bnode_create+0x269/0x330 fs/hfsplus/bnode.c:440
 hfsplus_bnode_find+0x1ec/0x540 fs/hfsplus/bnode.c:486
 hfsplus_brec_find+0x10d/0x220 fs/hfsplus/bfind.c:183
 hfsplus_brec_read+0x2e/0x90 fs/hfsplus/bfind.c:222
 hfsplus_find_cat+0x4c/0x160 fs/hfsplus/catalog.c:202
 hfsplus_iget+0x1f1/0x310 fs/hfsplus/super.c:82
 hfsplus_fill_super+0x4fb/0xa20 fs/hfsplus/super.c:509
 mount_bdev+0x130/0x1a0 fs/super.c:1658
 hfsplus_mount+0x39/0x50 fs/hfsplus/super.c:647
 legacy_get_tree+0x3f/0xb0 fs/fs_context.c:662
 vfs_get_tree+0x3a/0x160 fs/super.c:1779
 do_new_mount fs/namespace.c:3352 [inline]
 path_mount+0xcb0/0x11d0 fs/namespace.c:3679
 do_mount fs/namespace.c:3692 [inline]
 __do_sys_mount fs/namespace.c:3898 [inline]
 __se_sys_mount fs/namespace.c:3875 [inline]
 __x64_sys_mount+0x17b/0x1c0 fs/namespace.c:3875
 x64_sys_call+0x2072/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:166
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f
RIP: 0033:0x7f9206291b3e
Code: 48 c7 c0 ff ff ff ff eb aa e8 be 0d 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 f3 0f 1e fa 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007f9206ffbe38 EFLAGS: 00000202 ORIG_RAX: 00000000000000a5
RAX: ffffffffffffffda RBX: 00000000000005dc RCX: 00007f9206291b3e
RDX: 0000000020000600 RSI: 0000000020000640 RDI: 00007f9206ffbe90
RBP: 00007f9206ffbed0 R08: 00007f9206ffbed0 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000202 R12: 0000000020000600
R13: 0000000020000640 R14: 00007f9206ffbe90 R15: 0000000020000000
 </TASK>
hfsplus: failed to load root directory
