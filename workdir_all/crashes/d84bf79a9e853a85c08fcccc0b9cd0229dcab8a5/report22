loop4: detected capacity change from 0 to 1024
======================================================
WARNING: possible circular locking dependency detected
6.9.0-rc4 #2 Not tainted
------------------------------------------------------
syz-executor.4/11187 is trying to acquire lock:
ffff88803351a0b0 (&tree->tree_lock#2){+.+.}-{3:3}, at: hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595

but task is already holding lock:
ffff888031109488 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_truncate+0x96/0x380 fs/hfsplus/extents.c:576

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}:
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_file_extend+0x83/0x590 fs/hfsplus/extents.c:457
       hfsplus_bmap_reserve+0xd5/0x110 fs/hfsplus/btree.c:358
       hfsplus_rename_cat+0xd5/0x5f0 fs/hfsplus/catalog.c:456
       hfsplus_rename+0xb7/0x120 fs/hfsplus/dir.c:552
       vfs_rename+0x104a/0x14b0 fs/namei.c:4880
       do_renameat2+0x877/0x8d0 fs/namei.c:5037
       __do_sys_renameat2 fs/namei.c:5071 [inline]
       __se_sys_renameat2 fs/namei.c:5068 [inline]
       __x64_sys_renameat2+0x62/0x80 fs/namei.c:5068
       x64_sys_call+0x1945/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:317
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

-> #0 (&tree->tree_lock#2){+.+.}-{3:3}:
       check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
       check_prevs_add kernel/locking/lockdep.c:3253 [inline]
       validate_chain kernel/locking/lockdep.c:3869 [inline]
       __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595
       hfsplus_setattr+0xe7/0x140 fs/hfsplus/inode.c:265
       notify_change+0x69f/0x9d0 fs/attr.c:497
       do_truncate+0xc2/0x110 fs/open.c:65
       vfs_truncate+0x21b/0x250 fs/open.c:111
       do_sys_truncate.part.0+0x90/0xd0 fs/open.c:134
       do_sys_truncate fs/open.c:128 [inline]
       __do_sys_truncate fs/open.c:146 [inline]
       __se_sys_truncate fs/open.c:144 [inline]
       __x64_sys_truncate+0x3c/0x60 fs/open.c:144
       x64_sys_call+0x1e8e/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:77
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&HFSPLUS_I(inode)->extents_lock);
                               lock(&tree->tree_lock#2);
                               lock(&HFSPLUS_I(inode)->extents_lock);
  lock(&tree->tree_lock#2);

 *** DEADLOCK ***

3 locks held by syz-executor.4/11187:
 #0: ffff888033518420 (sb_writers#27){.+.+}-{0:0}, at: vfs_truncate+0x77/0x250 fs/open.c:84
 #1: ffff888031109680 (&sb->s_type->i_mutex_key#31){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:795 [inline]
 #1: ffff888031109680 (&sb->s_type->i_mutex_key#31){+.+.}-{3:3}, at: do_truncate+0xb1/0x110 fs/open.c:63
 #2: ffff888031109488 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_truncate+0x96/0x380 fs/hfsplus/extents.c:576

stack backtrace:
CPU: 1 PID: 11187 Comm: syz-executor.4 Not tainted 6.9.0-rc4 #2
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0xda/0x140 lib/dump_stack.c:114
 dump_stack+0x19/0x20 lib/dump_stack.c:123
 print_circular_bug+0x2d5/0x430 kernel/locking/lockdep.c:2060
 check_noncircular+0x10e/0x120 kernel/locking/lockdep.c:2187
 check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
 check_prevs_add kernel/locking/lockdep.c:3253 [inline]
 validate_chain kernel/locking/lockdep.c:3869 [inline]
 __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
 lock_acquire kernel/locking/lockdep.c:5754 [inline]
 lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
 __mutex_lock_common kernel/locking/mutex.c:608 [inline]
 __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
 mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
 hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595
 hfsplus_setattr+0xe7/0x140 fs/hfsplus/inode.c:265
 notify_change+0x69f/0x9d0 fs/attr.c:497
 do_truncate+0xc2/0x110 fs/open.c:65
 vfs_truncate+0x21b/0x250 fs/open.c:111
 do_sys_truncate.part.0+0x90/0xd0 fs/open.c:134
 do_sys_truncate fs/open.c:128 [inline]
 __do_sys_truncate fs/open.c:146 [inline]
 __se_sys_truncate fs/open.c:144 [inline]
 __x64_sys_truncate+0x3c/0x60 fs/open.c:144
 x64_sys_call+0x1e8e/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:77
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f
RIP: 0033:0x7fe36be8fd6d
Code: c3 e8 97 2b 00 00 0f 1f 80 00 00 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fe36cc44028 EFLAGS: 00000246 ORIG_RAX: 000000000000004c
RAX: ffffffffffffffda RBX: 00007fe36bfcbf80 RCX: 00007fe36be8fd6d
RDX: 0000000000000000 RSI: 00000000001ff002 RDI: 0000000020000080
RBP: 00007fe36bef14cd R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 000000000000000b R14: 00007fe36bfcbf80 R15: 00007fe36cc24000
 </TASK>
