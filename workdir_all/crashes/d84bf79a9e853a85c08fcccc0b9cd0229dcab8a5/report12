======================================================
WARNING: possible circular locking dependency detected
6.9.0-rc4 #2 Not tainted
------------------------------------------------------
syz-executor.5/14422 is trying to acquire lock:
ffff88802aa940b0 (&tree->tree_lock){+.+.}-{3:3}, at: hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595

but task is already holding lock:
ffff88802c98e288 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_truncate+0x96/0x380 fs/hfsplus/extents.c:576

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}:
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_get_block+0x137/0x390 fs/hfsplus/extents.c:260
       block_read_full_folio+0x1ca/0x550 fs/buffer.c:2384
       hfsplus_read_folio+0x21/0x30 fs/hfsplus/inode.c:28
       filemap_read_folio+0x51/0x140 mm/filemap.c:2331
       do_read_cache_folio+0x18c/0x2f0 mm/filemap.c:3747
       do_read_cache_page mm/filemap.c:3813 [inline]
       read_cache_page+0x3b/0xb0 mm/filemap.c:3822
       read_mapping_page include/linux/pagemap.h:888 [inline]
       __hfs_bnode_create+0x269/0x330 fs/hfsplus/bnode.c:440
       hfsplus_bnode_find+0x1ec/0x540 fs/hfsplus/bnode.c:486
       hfsplus_brec_find+0x10d/0x220 fs/hfsplus/bfind.c:183
       hfsplus_brec_read+0x2e/0x90 fs/hfsplus/bfind.c:222
       hfsplus_find_cat+0x4c/0x160 fs/hfsplus/catalog.c:202
       hfsplus_iget+0x1f1/0x310 fs/hfsplus/super.c:82
       hfsplus_fill_super+0x4fb/0xa20 fs/hfsplus/super.c:509
       mount_bdev+0x130/0x1a0 fs/super.c:1658
       hfsplus_mount+0x39/0x50 fs/hfsplus/super.c:647
       legacy_get_tree+0x3f/0xb0 fs/fs_context.c:662
       vfs_get_tree+0x3a/0x160 fs/super.c:1779
       do_new_mount fs/namespace.c:3352 [inline]
       path_mount+0xcb0/0x11d0 fs/namespace.c:3679
       do_mount fs/namespace.c:3692 [inline]
       __do_sys_mount fs/namespace.c:3898 [inline]
       __se_sys_mount fs/namespace.c:3875 [inline]
       __x64_sys_mount+0x17b/0x1c0 fs/namespace.c:3875
       x64_sys_call+0x2072/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:166
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

-> #0 (&tree->tree_lock){+.+.}-{3:3}:
       check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
       check_prevs_add kernel/locking/lockdep.c:3253 [inline]
       validate_chain kernel/locking/lockdep.c:3869 [inline]
       __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
       lock_acquire kernel/locking/lockdep.c:5754 [inline]
       lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
       __mutex_lock_common kernel/locking/mutex.c:608 [inline]
       __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
       mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
       hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595
       hfsplus_write_failed fs/hfsplus/inode.c:37 [inline]
       hfsplus_write_begin+0xbf/0xd0 fs/hfsplus/inode.c:51
       cont_expand_zero fs/buffer.c:2494 [inline]
       cont_write_begin+0x164/0x400 fs/buffer.c:2557
       hfsplus_write_begin+0x5a/0xd0 fs/hfsplus/inode.c:47
       generic_cont_expand_simple+0x6e/0xe0 fs/buffer.c:2458
       hfsplus_setattr+0xb7/0x140 fs/hfsplus/inode.c:259
       notify_change+0x69f/0x9d0 fs/attr.c:497
       do_truncate+0xc2/0x110 fs/open.c:65
       do_ftruncate+0x32c/0x430 fs/open.c:181
       do_sys_ftruncate fs/open.c:199 [inline]
       __do_sys_ftruncate fs/open.c:207 [inline]
       __se_sys_ftruncate fs/open.c:205 [inline]
       __x64_sys_ftruncate+0x6a/0xc0 fs/open.c:205
       x64_sys_call+0x54b/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:78
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(&HFSPLUS_I(inode)->extents_lock);
                               lock(&tree->tree_lock);
                               lock(&HFSPLUS_I(inode)->extents_lock);
  lock(&tree->tree_lock);

 *** DEADLOCK ***

3 locks held by syz-executor.5/14422:
 #0: ffff888022fbe420 (sb_writers#27){.+.+}-{0:0}, at: do_sys_ftruncate fs/open.c:199 [inline]
 #0: ffff888022fbe420 (sb_writers#27){.+.+}-{0:0}, at: __do_sys_ftruncate fs/open.c:207 [inline]
 #0: ffff888022fbe420 (sb_writers#27){.+.+}-{0:0}, at: __se_sys_ftruncate fs/open.c:205 [inline]
 #0: ffff888022fbe420 (sb_writers#27){.+.+}-{0:0}, at: __x64_sys_ftruncate+0x6a/0xc0 fs/open.c:205
 #1: ffff88802c98e480 (&sb->s_type->i_mutex_key#38){+.+.}-{3:3}, at: inode_lock include/linux/fs.h:795 [inline]
 #1: ffff88802c98e480 (&sb->s_type->i_mutex_key#38){+.+.}-{3:3}, at: do_truncate+0xb1/0x110 fs/open.c:63
 #2: ffff88802c98e288 (&HFSPLUS_I(inode)->extents_lock){+.+.}-{3:3}, at: hfsplus_file_truncate+0x96/0x380 fs/hfsplus/extents.c:576

stack backtrace:
CPU: 0 PID: 14422 Comm: syz-executor.5 Not tainted 6.9.0-rc4 #2
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0xda/0x140 lib/dump_stack.c:114
 dump_stack+0x19/0x20 lib/dump_stack.c:123
 print_circular_bug+0x2d5/0x430 kernel/locking/lockdep.c:2060
 check_noncircular+0x10e/0x120 kernel/locking/lockdep.c:2187
 check_prev_add+0xe4/0x9e0 kernel/locking/lockdep.c:3134
 check_prevs_add kernel/locking/lockdep.c:3253 [inline]
 validate_chain kernel/locking/lockdep.c:3869 [inline]
 __lock_acquire+0x1214/0x15f0 kernel/locking/lockdep.c:5137
 lock_acquire kernel/locking/lockdep.c:5754 [inline]
 lock_acquire+0xab/0x2c0 kernel/locking/lockdep.c:5719
 __mutex_lock_common kernel/locking/mutex.c:608 [inline]
 __mutex_lock+0x82/0x450 kernel/locking/mutex.c:752
 mutex_lock_nested+0x1a/0x20 kernel/locking/mutex.c:804
 hfsplus_file_truncate+0x366/0x380 fs/hfsplus/extents.c:595
 hfsplus_write_failed fs/hfsplus/inode.c:37 [inline]
 hfsplus_write_begin+0xbf/0xd0 fs/hfsplus/inode.c:51
 cont_expand_zero fs/buffer.c:2494 [inline]
 cont_write_begin+0x164/0x400 fs/buffer.c:2557
 hfsplus_write_begin+0x5a/0xd0 fs/hfsplus/inode.c:47
 generic_cont_expand_simple+0x6e/0xe0 fs/buffer.c:2458
 hfsplus_setattr+0xb7/0x140 fs/hfsplus/inode.c:259
 notify_change+0x69f/0x9d0 fs/attr.c:497
 do_truncate+0xc2/0x110 fs/open.c:65
 do_ftruncate+0x32c/0x430 fs/open.c:181
 do_sys_ftruncate fs/open.c:199 [inline]
 __do_sys_ftruncate fs/open.c:207 [inline]
 __se_sys_ftruncate fs/open.c:205 [inline]
 __x64_sys_ftruncate+0x6a/0xc0 fs/open.c:205
 x64_sys_call+0x54b/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:78
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f
RIP: 0033:0x7fd04588fd6d
Code: c3 e8 97 2b 00 00 0f 1f 80 00 00 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fd04663c028 EFLAGS: 00000246 ORIG_RAX: 000000000000004d
RAX: ffffffffffffffda RBX: 00007fd0459cbf80 RCX: 00007fd04588fd6d
RDX: 0000000000000000 RSI: 0000000008800000 RDI: 0000000000000005
RBP: 00007fd0458f14cd R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
R13: 000000000000000b R14: 00007fd0459cbf80 R15: 00007fd04661c000
 </TASK>
