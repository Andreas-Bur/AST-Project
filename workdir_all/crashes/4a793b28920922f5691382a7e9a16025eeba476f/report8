jfs_dirty_inode called on read-only volume
Is remount racy?
BUG: kernel NULL pointer dereference, address: 0000000000000820
#PF: supervisor read access in kernel mode
#PF: error_code(0x0000) - not-present page
PGD 43396067 P4D 43396067 PUD 0 
Oops: 0000 [#1] PREEMPT SMP NOPTI
CPU: 1 PID: 15598 Comm: syz-executor.3 Not tainted 6.9.0-rc4 #2
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
RIP: 0010:diIAGRead fs/jfs/jfs_imap.c:2666 [inline]
RIP: 0010:diRead+0x8a/0x3b0 fs/jfs/jfs_imap.c:316
Code: 4c 89 a3 20 fc ff ff 48 c1 e8 0c 4c 89 f7 48 89 45 d0 e8 a9 59 4f ff 8b 45 d0 45 31 c0 ba 00 10 00 00 4d 8b 7c 24 80 8d 70 01 <49> 8b bf 20 08 00 00 48 8b 47 28 48 8b 80 38 06 00 00 0f bf 48 4e
RSP: 0018:ffff8880281dba80 EFLAGS: 00010246
RAX: 0000000000000000 RBX: ffff88801c52b8e0 RCX: ffffffff81c8b647
RDX: 0000000000001000 RSI: 0000000000000001 RDI: ffff88800df42c48
RBP: ffff8880281dbad0 R08: 0000000000000000 R09: 0000000000000001
R10: 0000000000000001 R11: 0000000000000000 R12: ffff88801c528cf8
R13: ffff88802a2a7900 R14: ffff88801c528990 R15: 0000000000000000
FS:  000055557f098480(0000) GS:ffff88807dd00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000000000820 CR3: 0000000032670005 CR4: 0000000000770ef0
PKRU: 55555554
Call Trace:
 <TASK>
 jfs_iget+0x6e/0x220 fs/jfs/inode.c:35
 jfs_lookup+0x15d/0x1b0 fs/jfs/namei.c:1469
 __lookup_slow+0x13f/0x270 fs/namei.c:1692
 lookup_slow fs/namei.c:1709 [inline]
 walk_component+0x1a0/0x250 fs/namei.c:2004
 lookup_last fs/namei.c:2461 [inline]
 path_lookupat+0xc6/0x320 fs/namei.c:2485
 filename_lookup+0xf2/0x270 fs/namei.c:2514
 user_path_at_empty+0x4a/0x70 fs/namei.c:2921
 user_path_at include/linux/namei.h:57 [inline]
 ksys_umount fs/namespace.c:1916 [inline]
 __do_sys_umount fs/namespace.c:1924 [inline]
 __se_sys_umount fs/namespace.c:1922 [inline]
 __x64_sys_umount+0x7a/0xd0 fs/namespace.c:1922
 x64_sys_call+0x153/0x20b0 arch/x86/include/generated/asm/syscalls_64.h:167
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xc3/0x200 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f
RIP: 0033:0x7f7acf09178b
Code: b0 ff ff ff f7 d8 64 89 01 48 83 c8 ff c3 90 f3 0f 1e fa 31 f6 e9 05 00 00 00 0f 1f 44 00 00 f3 0f 1e fa b8 a6 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 05 c3 0f 1f 40 00 48 c7 c2 b0 ff ff ff f7 d8
RSP: 002b:00007ffff0239398 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f7acf09178b
RDX: 00007f7acf0292c0 RSI: 0000000000000009 RDI: 00007ffff0239450
RBP: 00007ffff0239450 R08: 0000000000000000 R09: 00007ffff0239220
R10: 000055557f0a1a23 R11: 0000000000000246 R12: 00007f7acf0f0278
R13: 00007ffff023a550 R14: 000055557f0a19b0 R15: 00007ffff023b620
 </TASK>
Modules linked in:
CR2: 0000000000000820
---[ end trace 0000000000000000 ]---
RIP: 0010:diIAGRead fs/jfs/jfs_imap.c:2666 [inline]
RIP: 0010:diRead+0x8a/0x3b0 fs/jfs/jfs_imap.c:316
Code: 4c 89 a3 20 fc ff ff 48 c1 e8 0c 4c 89 f7 48 89 45 d0 e8 a9 59 4f ff 8b 45 d0 45 31 c0 ba 00 10 00 00 4d 8b 7c 24 80 8d 70 01 <49> 8b bf 20 08 00 00 48 8b 47 28 48 8b 80 38 06 00 00 0f bf 48 4e
RSP: 0018:ffff8880281dba80 EFLAGS: 00010246
RAX: 0000000000000000 RBX: ffff88801c52b8e0 RCX: ffffffff81c8b647
RDX: 0000000000001000 RSI: 0000000000000001 RDI: ffff88800df42c48
RBP: ffff8880281dbad0 R08: 0000000000000000 R09: 0000000000000001
R10: 0000000000000001 R11: 0000000000000000 R12: ffff88801c528cf8
R13: ffff88802a2a7900 R14: ffff88801c528990 R15: 0000000000000000
FS:  000055557f098480(0000) GS:ffff88807dd00000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000000000820 CR3: 0000000032670005 CR4: 0000000000770ef0
PKRU: 55555554
----------------
Code disassembly (best guess):
   0:	4c 89 a3 20 fc ff ff 	mov    %r12,-0x3e0(%rbx)
   7:	48 c1 e8 0c          	shr    $0xc,%rax
   b:	4c 89 f7             	mov    %r14,%rdi
   e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  12:	e8 a9 59 4f ff       	call   0xff4f59c0
  17:	8b 45 d0             	mov    -0x30(%rbp),%eax
  1a:	45 31 c0             	xor    %r8d,%r8d
  1d:	ba 00 10 00 00       	mov    $0x1000,%edx
  22:	4d 8b 7c 24 80       	mov    -0x80(%r12),%r15
  27:	8d 70 01             	lea    0x1(%rax),%esi
* 2a:	49 8b bf 20 08 00 00 	mov    0x820(%r15),%rdi <-- trapping instruction
  31:	48 8b 47 28          	mov    0x28(%rdi),%rax
  35:	48 8b 80 38 06 00 00 	mov    0x638(%rax),%rax
  3c:	0f bf 48 4e          	movswl 0x4e(%rax),%ecx
